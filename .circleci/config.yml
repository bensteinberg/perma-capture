version: 2.1
jobs:
  build:
    machine:
      image: ubuntu-2004:202201-02
    working_directory: ~/project
    steps:

      # Initial setup
      - checkout:
          path: ~/project
      - run:
          name: "Info"
          command: |
            docker-compose --version
            docker version

      # Quick tests to fail fast on common errors
      - run:
          name: "Flake8"
          working_directory: web
          command: |
            export PYENV_VERSION=3.10.2  # use the version of python3 installed on circleci
            pip install `egrep -o 'flake8==\S+' requirements.txt`  # install our version of flake8
            flake8

      # Docker image building and caching
      # This block shaves a minute or two off of the test runtime by using cached docker images.
      # Otherwise we could omit this step entirely and let `docker-compose run` build what it needs to.
      - restore_cache:
          key: docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum "docker/web/Dockerfile" }}-{{ checksum "web/requirements.txt" }}-{{ checksum "web/frontend/yarn.lock" }}
      - run:
          name: "Build docker images"
          command: |
            if test -f ~/docker-cache.tar; then
              echo "Loading cached docker images"
              docker load -i ~/docker-cache.tar
            else
              echo "Building new docker images"
              docker-compose build
              docker save -o ~/docker-cache.tar perma-capture
            fi
      - save_cache:
          key: docker-images-{{ checksum "docker-compose.yml" }}-{{ checksum "docker/web/Dockerfile" }}-{{ checksum "web/requirements.txt" }}-{{ checksum "web/frontend/yarn.lock" }}
          paths:
            - "~/docker-cache.tar"

      # Actual tests
      - run:
          name: "Test Django"
          command: |
            export HOST_DIRECTORY=project
            docker-compose up -d
            docker-compose exec web ./manage.py collectstatic --noinput   # collect static files
            docker-compose exec web bash -c "cd frontend && yarn install"
            docker-compose exec web bash -c "cd frontend && yarn build"
            mkdir -p junit/pytest                            # storage for circleci test info
            docker-compose exec web pytest \
              --junitxml=junit/pytest/test-results.xml       `# write test results so they can be displayed by circleci` \
              --cov --cov-config=setup.cfg --cov-report xml  `# write coverage data to .coverage for upload by codecov`


      # Upload test details to circleci
      - store_test_results:
          path: junit

      # Upload coverage to Codecov
      # Recommended approach is to use an orb: https://circleci.com/blog/making-code-coverage-easy-to-see-with-the-codecov-orb/
      # Currently using python package instead of orb, because of https://github.com/codecov/codecov-circleci-orb/issues/12
      - run:
          name: "Upload coverage"
          command: |
            sudo pip install codecov
            codecov

      # Deploy via Salt
      - run:
          name: "Deploy"
          command: |
            if [[ "$CIRCLE_PULL_REQUEST" == "" && "$CIRCLE_BRANCH" == "develop" ]] ; then
                export DEPLOY_CONTENT='{"CIRCLE_BUILD_NUM":"'$CIRCLE_BUILD_NUM'","CIRCLE_SHA1":"'$CIRCLE_SHA1'","CIRCLE_BRANCH":"'$CIRCLE_BRANCH'","CIRCLE_PROJECT_REPONAME":"'$CIRCLE_PROJECT_REPONAME'","CIRCLE_PROJECT_USERNAME":"'$CIRCLE_PROJECT_USERNAME'"}' ;
                export DEPLOY_SIG="sha1=`echo -n "$DEPLOY_CONTENT" | openssl sha1 -hmac $DEPLOY_KEY | sed 's/^.* //'`" ;
                curl -X POST "$DEPLOY_URL" --data "$DEPLOY_CONTENT" -H "Content-Type: application/json" -H "X-Circle-Signature: $DEPLOY_SIG" ;
            fi
            if [[ "$CIRCLE_PULL_REQUEST" == "" && "$CIRCLE_BRANCH" == "new-arch-with-vue" ]] ; then
                if [[ `git status web/main/static/ --porcelain` ]] ; then
                    git config user.email "lil@law.harvard.edu"
                    git config user.name "Circle CI"
                    git add web/main/static/
                    git commit -m 'Add built JS [skip ci]'
                    git push origin HEAD || exit 1
                fi
                export DEPLOY_CONTENT='{"CIRCLE_BUILD_NUM":"'$CIRCLE_BUILD_NUM'","CIRCLE_SHA1":"'$CIRCLE_SHA1'","CIRCLE_BRANCH":"'$CIRCLE_BRANCH'","CIRCLE_PROJECT_REPONAME":"'$CIRCLE_PROJECT_REPONAME'","CIRCLE_PROJECT_USERNAME":"'$CIRCLE_PROJECT_USERNAME'"}' ;
                export DEPLOY_SIG="sha1=`echo -n "$DEPLOY_CONTENT" | openssl sha1 -hmac $DEPLOY_KEY | sed 's/^.* //'`" ;
                curl -X POST "$INTERIM_DEPLOY_URL" --data "$DEPLOY_CONTENT" -H "Content-Type: application/json" -H "X-Circle-Signature: $DEPLOY_SIG" ;
            fi
